Join
 
A join is a query that combines rows from two or more tables ,views or materialized views.

Types of Joins:-
---------------------
(INNER) JOIN: Returns records that have matching values in both tables
LEFT (OUTER) JOIN: Return all records from the left table, and the matched records from the right table
RIGHT (OUTER) JOIN: Return all records from the right table, and the matched records from the left table
FULL (OUTER) JOIN: Return all records when there is a match in either left or right table


1)inner or equijoins
inner join show matches only when they exist in both the tables
example:-emp table have deptno(fk) and dept table has deptno(pk)

example:-select e.empno,e.ename,d.deptno,d.location from emp e,dept d where e.deptno=d.deptno;

2)non equijoins
it is a join other than equijoin 
example:-<=,>=,between
select e.name,e.sal,j.job from emp e, job j where e.sal between j.low_sal and j.high_sal;

(emp)empno,name,sal

(job)job,low_sal,high_sal

salary -10,000 - 15,000

update  emp set sal=10000 where empno=1;

3)outer join
By this we can also see rows that do not meet the join condition .the outer join operator is the plus sign(+)
The outer join can apper in one side of the expression the side that has information missing.
example:-dept table has deptno 50 but the emp table donot have deptno 50;  
select e.empno,e.ename,d.deptno,d.location from emp e,dept d where e.deptno(+)=d.deptno;(right)

select e.empno,e.ename,d.deptno,d.location from emp e,dept d where e.deptno=d.deptno(+);(left)


4)self join
when we join a table to itself
example:- finding manager of each employee.
----------------------------------------------
SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
FROM Orders
INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;

---------------------------------------------------------------------
SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
ORDER BY Customers.CustomerName;
--------------------------------------------------------------
SELECT Orders.OrderID, Employees.LastName, Employees.FirstName
FROM Orders
RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
ORDER BY Orders.OrderID;
-------------------------------------------------------------------------------------------------
SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID
ORDER BY Customers.CustomerName;
------------------------------------------------------------------------
SQL Self JOIN
A self JOIN is a regular join, but the table is joined with itself.

SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City
FROM Customers A, Customers B
WHERE A.CustomerID <> B.CustomerID
AND A.City = B.City 
ORDER BY A.City;
------------------------------------------------------------------
-----------------------------------------------self join-------------------------------------------
<>  ------> not equal to 
SELECT * FROM Test Where name <> 'amit'
----------------------------------------------------------------------------
create table customer (CustomerID number,CustomerName varchar2(30),ContactName varchar2(30),	
Address	varchar2(30),City varchar2(30),PostalCode number,Country varchar2(30))
---------------------------------------------------------------------------------
SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City
FROM Customer A, Customer B
WHERE A.CustomerID <> B.CustomerID
AND A.City = B.City
ORDER BY A.City;
------------------------------------------------------------
2nd-feb-2024
---------------------------
create table bank(accno number primary key,name varchar(30) not null, address varchar(30) unique, balance number);

insert into bank values(102,'sunil','Hydrabad',15000);
select * from bank;

create table trans(accno number references bank,customername varchar(30),dateoftrans date);
insert into trans values(102,'sunil','02-feb-2024');

inner or eque-join
--------------------------------
select a.accno,a.name,a.address,a.balance,b.dateoftrans from  bank a, trans b where a.accno=b.accno;
----------------------------------------------------------------------
Left outer join
-------------------------------------------------
select a.accno,a.name,a.address,a.balance,b.dateoftrans from bank left join trans on bank a, trans b where a.accno=b.accno(+);
-------------------------------------------------

select bank.accno,bank.name,bank.address,bank.balance,trans.dateoftrans from bank left outer join trans on bank.accno=trans.accno order by bank.address desc;

select bank.accno,bank.name,bank.address,bank.balance,trans.dateoftrans from bank left outer join trans on bank.accno=trans.accno order by bank.address asc;
-------------------------------------------------------------------------------------------------------------------------------------------------------
select bank.accno,bank.name,bank.address,bank.balance,trans.dateoftrans from bank right outer join trans on bank.accno=trans.accno order by bank.address asc;
----------------------------------------------------------------------------------------------------------------
select bank.accno,bank.name,bank.address,bank.balance,trans.dateoftrans from bank full outer join trans on bank.accno=trans.accno order by bank.address asc;
----------------------------------------------------------------------------------------
product
customer
--------------------------
create table product(pid number primary key, pname varchar2(30) unique, pcost number(9,2) not null, available varchar2(30));  

insert into product values(104,'oil',240,'yes');
select * from product;

create table customer(cid number, cname varchar2(30) not null, loc varchar2(30),pid number references product);

insert into customer values(1003,'amit','hydrabad',103);
select * from customer;

select cid,count(cid) from customer group by cid having count(cid) >= 2;

select cid,count(cid) from customer group by cid;

select loc,count(loc) from customer group by loc order by loc asc;

select loc,count(loc) from customer group by loc order by loc desc;

equi-join
-------------------
select product.pid, product.pname, product.pcost, product.available,
customer.cid, customer.cname, customer.loc from product , customer where 
product.pid=customer.pid ;

outer-join
-----------------
select product.pid, product.pname, product.pcost, product.available,
customer.cid, customer.cname, customer.loc from product , customer where 
product.pid=customer.pid(+);

select product.pid, product.pname, product.pcost, product.available,
customer.cid, customer.cname, customer.loc from product left outer join customer on 
product.pid=customer.pid;


select product.pid, product.pname, product.pcost, product.available,
customer.cid, customer.cname, customer.loc from product right outer join customer on 
product.pid=customer.pid;


select product.pid, product.pname, product.pcost, product.available,
customer.cid, customer.cname, customer.loc from product full outer join customer on 
product.pid=customer.pid;

---------------------------------------------------------------
Question-1(join tables)
------------------------------------------------
Write a query to display order id, customer name, hotel name, and order amount of all orders. Sort the result based on order id in ascending order.

 Use 1)Customers,2) Hotel_details 3) Orders tables to retrieve records.

select orders.order_id, customers.customer_name, hotel_details.hotel_name, orders.order_amount
from orders, customers, hotel_details
where orders.customer_id = customers.customer_id
    and orders.hotel_id = hotel_details.hotel_id
order by orders.order_id;

------------------------------------------------------------------------------------------------------------
Question-2 (group by)
-----------------------------------------------
Write a query to display the user id and number of time tickets was booked by each user. Give an alias name as no_of_times. Sort the result based on the user_id.

select user_id, count(bd_id) as `no_of_times`
from bookingdetails
group by user_id asc;
-------------------------------------------------------------------------------------------
Write a query to display car id and number of times car taken for rental. Give an alias name to the number of times car taken for rental as 'NO_OF_TRIPS'. Sort the records based on car id in ascending order.

select car_id, count(car_id) as NO_OF_TRIPS from rentals group by car_id order by car_id;
--------------------------------------------------------------------------------------------------------------------